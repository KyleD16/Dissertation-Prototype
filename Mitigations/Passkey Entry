#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>

#define SERVICE_UUID        "600f00c4-591f-4c03-a01a-c7a29d6a6fe1"
#define CHARACTERISTIC_UUID "8d310055-60fe-4774-a5b7-e3744632da7f"
#define LED_PIN 2

BLECharacteristic* pLedChar = nullptr;
BLEServer* pServer = nullptr;
BLEAdvertising* pAdvertising = nullptr;

// 🛡️ Secure pairing callbacks
class MySecurity : public BLESecurityCallbacks {
  uint32_t onPassKeyRequest() override {
    return 123456;  // Static passkey for demonstration
  }

  void onPassKeyNotify(uint32_t pass_key) override {
    Serial.printf("PassKey notify: %d\n", pass_key);
  }

  bool onConfirmPIN(uint32_t pin) override {
    Serial.printf("Confirming PIN: %d\n", pin);
    return true;
  }

  bool onSecurityRequest() override {
    return true;
  }

  void onAuthenticationComplete(esp_ble_auth_cmpl_t auth_cmpl) override {
    if (auth_cmpl.success) {
      Serial.println("Authentication successful!");
    } else {
      Serial.println("Authentication failed.");
    }
  }
};

// 🔧 LED control characteristic handler using Arduino String
class LedControlCallbacks : public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic* pCharacteristic) override {
    String value = pCharacteristic->getValue();

    if (value == "on") {
      digitalWrite(LED_PIN, HIGH);
      Serial.println("LED turned ON");
    } else if (value == "off") {
      digitalWrite(LED_PIN, LOW);
      Serial.println("LED turned OFF");
    } else {
      Serial.println("Invalid value received");
    }
  }
};

void removeAllBonds() {
  Serial.println("Removing all bonded devices...");
  esp_ble_bond_dev_t bondedDevices[20];
  int count = esp_ble_get_bond_device_num();
  if (count == 0) {
    Serial.println("No bonded devices found.");
    return;
  }

  esp_ble_get_bond_device_list(&count, bondedDevices);
  for (int i = 0; i < count; i++) {
    esp_ble_remove_bond_device(bondedDevices[i].bd_addr);
    Serial.printf("Removed bond with device %d\n", i + 1);
  }
}

void setup() {
  Serial.begin(115200);
  delay(100);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, HIGH);  // LED starts ON

  Serial.println("Starting Secure BLE Server");

  BLEDevice::init("ESP32-KD");

  // Remove previous bonds (to force pairing prompt)
  removeAllBonds();

  // Configure BLE security
  BLESecurity* pSecurity = new BLESecurity();
  pSecurity->setAuthenticationMode(ESP_LE_AUTH_REQ_SC_MITM_BOND);  // MITM + bonding
  pSecurity->setCapability(ESP_IO_CAP_OUT);  // Forces Passkey Entry (device displays)
  pSecurity->setInitEncryptionKey(ESP_BLE_ENC_KEY_MASK | ESP_BLE_ID_KEY_MASK);
  BLEDevice::setEncryptionLevel(ESP_BLE_SEC_ENCRYPT_MITM);
  BLEDevice::setSecurityCallbacks(new MySecurity());

  // Create BLE server and service
  pServer = BLEDevice::createServer();
  BLEService* pService = pServer->createService(SERVICE_UUID);

  // Create secure LED characteristic
  pLedChar = pService->createCharacteristic(
    CHARACTERISTIC_UUID,
    BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_WRITE
  );
  pLedChar->setValue("on");
  pLedChar->setCallbacks(new LedControlCallbacks());

  // Enforce encryption + MITM protection
  pLedChar->setAccessPermissions(ESP_GATT_PERM_READ_ENC_MITM | ESP_GATT_PERM_WRITE_ENC_MITM);

  pService->start();

  // Start advertising the service
  pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->start();

  Serial.println("📡 BLE Advertising Started (SecureESP32)");
}

void loop() {
  delay(1000);  // Idle loop
}
